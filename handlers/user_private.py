from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from config import BOT_LINK
from database.orm_query import user_exists, add_user
from filters.chat_types import ChatTypeFilter
from kbds.inline import get_callback_btns, get_url_btns
from kbds.keyboards import get_kb

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

@user_private_router.message(CommandStart())
async def start_message(message: types.Message, session: AsyncSession):
    # get = await user_exists(session, 123213214)
    # print(f'–≠–¢–û –í–´–í–û–î - ', get)
    referer_id = None

    if await user_exists(session, message.from_user.id) == None:
        await add_user(session, user_id=message.from_user.id, referer_id=referer_id, balance=500)
        await message.answer_photo(
            photo='AgACAgIAAxkBAAM8ZgaLH-oBdfCl-QAB6gXQ4m4wfJ8VAAJn2TEbzOg4SI9Pnv-H3fZTAQADAgADeAADNAQ',
            caption='<b>AIRDROP HAMI TOKEN</b> üêπ\n\n<b>500</b> $HAMI - –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤ –±–æ—Ç–∞ ü§ù\n–£—Å–ø–µ–π –ø–æ–∑–≤–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!\n\n–ù–ï–¢ –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AIRDROP –æ—Ç HAMIüêπ\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–≥ –∫–∞–Ω–∞–ª, —Ç–∞–º –≤—Å–µ —É—Å–ª–æ–≤–∏—èüëá\n\n'
                    '@hamitoken',
            reply_markup=get_callback_btns(
                btns={
                    '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è‚úÖ': 'check_subscribe'
                },
                sizes=(1,)
            ))

        await message.delete()

    await message.answer_photo(
        photo='AgACAgIAAxkBAAM8ZgaLH-oBdfCl-QAB6gXQ4m4wfJ8VAAJn2TEbzOg4SI9Pnv-H3fZTAQADAgADeAADNAQ',
        caption='<b>AIRDROP HAMI TOKEN</b> üêπ\n\n<b>500</b> $HAMI - –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤ –±–æ—Ç–∞ ü§ù\n–£—Å–ø–µ–π –ø–æ–∑–≤–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!\n\n–ù–ï–¢ –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AIRDROP –æ—Ç HAMIüêπ\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–≥ –∫–∞–Ω–∞–ª, —Ç–∞–º –≤—Å–µ —É—Å–ª–æ–≤–∏—èüëá\n\n'
                '@hamitoken',
        reply_markup=get_callback_btns(
            btns={
                '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è‚úÖ': 'check_subscribe'
            },
            sizes=(1,)
        ))


@user_private_router.callback_query(F.data == 'check_subscribe')
async def check_subscribe_command(callback: types.CallbackQuery, bot: Bot):
    ref_link = f'{BOT_LINK}?start=r{callback.from_user.id}'
    text = "500 $HAMI for everybodyüêπ\nLet's grow the biggest community ever!"

    if (await bot.get_chat_member(chat_id='@hamitoken', user_id=callback.from_user.id)).status != 'left':
        await callback.message.answer('<b>üìÉ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                                      reply_markup=get_kb('–ö–æ—à–µ–ª–µ–∫/Walletüëõ',
                                                          '–ë–∞–ª–∞–Ω—Å/balanceüêπ',
                                                          'Twitter(HOT)üì¢',
                                                          '–£—Å–ª–æ–≤–∏—è/Termsüìí',
                                                          placeholder='–í—ã–±–µ—Ä–∞–π –∫–Ω–æ–ø–∫—É',
                                                          sizes=(2, 2,)
                                                          )
        )

        await callback.message.answer_photo('AgACAgIAAxkBAAIBhWYLD_BBRjTVjvdMOmNZFki0knyDAAIX2zEbXu1ZSK1FJQr4kUB9AQADAgADeAADNAQ',
                                            caption='<b>–í–∞—à –±–∞–ª–∞–Ω—Å: 500 $HAMI üêπ</b>\n1fren = 500 $HAMI\n\n–ß—Ç–æ–±—ã —É–º–Ω–æ–∂–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ 2—Ö, –Ω–∞–¥–æ –ø–µ—Ä–µ–π—Ç–∏ –≤–æ –∫–ª–∞–¥–∫—É Twitter\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–πüëá',
                                            reply_markup=get_url_btns(
                                                btns={
                                                    '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞/inviteüë•' : f'https://t.me/share/url?url={ref_link}&text={text}',
                                                }
                                            ))

        await callback.answer()
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –±–ª—è –Ω–µ—Ñ–æ—Ä')
        await callback.answer('Nope!')


@user_private_router.message()
async def get_photo(message: types.Message):
    if message.photo:
        await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')